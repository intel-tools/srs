on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'repo'
        required: true
        type: string
      rate-limit:
        description: 'rate limit'
        required: false
        default: 500
        type: number
      version:
        description: 'scorecard version'
        required: false
        default: '4.10.2'
        type: string
  workflow_call:
    inputs:
      repo:
        description: 'repo'
        required: true
        default: ''
        type: string
      rate-limit:
        description: 'rate limit'
        required: false
        default: 500
        type: number
      version:
        description: 'scorecard version'
        required: false
        default: '4.10.2'
        type: string
    secrets:
      GHPAT:
        required: true

jobs:
  ossf-scorecard:
    runs-on: ubuntu-latest
    steps:
      - name: generate save directory name
        shell: bash
        id: vars
        run: |
          SREPO=$(echo -n ${{ inputs.repo }} | tr '/' .)
          echo "SREPO set to ${SREPO}"
          echo "SREPO=${SREPO}" >> $GITHUB_OUTPUT

      - name: get official score
        id: official
        run: |
          curl https://api.securityscorecards.dev/projects/github.com/${{ inputs.repo }} > ${{ steps.vars.outputs.SREPO }}.ossf-scorecard.json
          if [ -s ${{ steps.vars.outputs.SREPO }}.ossf-scorecard.json ]; then
            version=$(jq -r '.scorecard.version' ${{ steps.vars.outputs.SREPO }}.ossf-scorecard.json)
            if [ "$version" == "v${{ inputs.version }}" ]; then
              echo result=1 >> $GITHUB_OUTPUT
            else
              echo result=0 >> $GITHUB_OUTPUT
              rm *.ossf-scorecard.json
            fi
          else
            echo result=0 >> $GITHUB_OUTPUT
          fi

      - name: rate limit
        if: steps.official.outputs.result == '0'
        env:
          GHPAT: ${{ secrets.GHPAT }}
        run: |
          rl=$(curl -H "Authorization: token $GHPAT" -X GET https://api.github.com/rate_limit | jq '.rate.remaining')
          echo "Rate limit remaining: $rl"
          while [ $rl -lt ${{ inputs.rate-limit }} ]; do
            sleep 1h
            rl=$(curl -H "Authorization: token $GHPAT" -X GET https://api.github.com/rate_limit | jq '.rate.remaining')
            echo "Rate limit remaining: $rl"
          done

      - name: Cache scorecard
        id: cache
        if: steps.official.outputs.result == '0'
        uses: actions/cache@v3
        with:
          path: scorecard-linux-amd64
          key: scorecard-linux-amd64-${{ inputs.version }}

      - name: Download scorecard
        if: steps.official.outputs.result == '0' && steps.cache.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/ossf/scorecard/releases/download/v${{ inputs.version }}/scorecard_${{ inputs.version }}_linux_amd64.tar.gz
          tar xvf scorecard*.tar.gz

      - name: Run scorecard
        if: steps.official.outputs.result == '0'
        env:
          GITHUB_AUTH_TOKEN: ${{ secrets.GHPAT }}
          GITHUB_TOKEN: ${{ secrets.GHPAT }}
        run: |
          ./scorecard-linux-amd64 --repo="${{ inputs.repo }}" --format=json \
            --checks="Vulnerabilities,Signed-Releases,Maintained,CI-Tests,CII-Best-Practices,Security-Policy,Pinned-Dependencies,Dangerous-Workflow,Code-Review,Packaging,Binary-Artifacts,License,Token-Permissions" \
            > ${{ steps.vars.outputs.SREPO }}.ossf-scorecard.json

      - name: save results
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          retention-days: 10
          name: ${{ steps.vars.outputs.SREPO }}.ossf-scorecard
          path: ${{ steps.vars.outputs.SREPO }}.ossf-scorecard.json

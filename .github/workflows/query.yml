name: Perform various scans on the results of the query
on:
  repository_dispatch:
    types: [query-command]
  pull_request:
    branches: [ main ]
jobs:
  query-repositories:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    outputs:
      json: ${{ steps.json.outputs.json }}
      comment-id: ${{ steps.comment.outputs.comment-id }}
    steps:
      - name: install dependencies
        run: |
          type -p curl >/dev/null || sudo apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt-get update \
          && sudo apt-get install gh -y

      - name: set search term
        env:
          #DEFAULT: "archived:false language:c language:c++ org:intel stars:>=100"
          #DEFAULT: "language:c language:c++ stars:>=10000"
          DEFAULT: "archived:false language:c language:c++"
        id: set
        run: |
          search=${{ github.event.client_payload.slash_command.args.named.search }}
          [[ -z $search ]] && search="$DEFAULT"
          echo search="$search" >> $GITHUB_OUTPUT

      - name: checkout repo
        uses: actions/checkout@v3

      - name: execute search
        id: search
        env:
          SEARCH: ${{ steps.set.outputs.search }}
          MINSTARS: 1000 # below this will be skipped
          MAXSTARS: 10000 # above this will be grabbed in a single loop, needs to be <=1000 results 
          INCREMENT: 200 # size to group search loop into
        run: |
          ./query.sh "${SEARCH}" $MINSTARS $MAXSTARS $INCREMENT

          count=$(jq '.repos | length' repos.json)

          echo "## Repositories matching search query '${SEARCH} stars:>=$MINSTARS': $count" >> summary.md

      - name: filter by build system
        id: json
        run: |
          jq -rc '.repos[].repo | "\(.nameWithOwner) \(.languages.nodes[].name)"' repos.json > flattened-repos.txt

          while read INFO; do
            repo=$(echo $INFO | awk '{ print $1 }')
            lang=$(echo $INFO | awk '{ print $2 }')

            case $lang in
              M4)
                echo $repo >> repos.txt
                ;;
              Meson)
                echo $repo >> repos.txt
                ;;
              CMake)
                echo $repo >> repos.txt
                ;;
              *)
                ;;
            esac
          done < flattened-repos.txt

          cat repos.txt | sort -u > filtered-repos.txt

          JSON="["
          while read INFO; do
            JSON+="{\"repo\":\"$INFO\"},"
          done < filtered-repos.txt
          JSON="${JSON%?}"
          JSON+="]"

          echo json=$JSON >> $GITHUB_OUTPUT
          echo $JSON > filtered-repos.json

          COUNT=$(jq '. | length' filtered-repos.json)

          echo "## Repositories with supported build systems: $COUNT" >> summary.md

      - name: Github step summary
        run: cat summary.md >> $GITHUB_STEP_SUMMARY

      - name: Create comment
        uses: peter-evans/create-or-update-comment@v2
        id: comment
        with:
          token: ${{ secrets.GHPAT }}
          issue-number: ${{ github.event.pull_request.number }}
          body-file: summary.md

      - name: save results
        uses: actions/upload-artifact@v3
        with:
          retention-days: 90
          name: repo-artifacts
          path: |
            repos.json
            filtered-repos.json
            summary.md

  scan-build:
    needs: query-repositories
    uses: ./.github/workflows/scan-build.yml
    with:
      input: ${{ needs.query-repositories.outputs.json }}

  ossf-scorecard:
    needs: query-repositories
    uses: ./.github/workflows/ossf-scorecard.yml
    with:
      input: ${{ needs.query-repositories.outputs.json }}

  aggregate-results:
    needs: [query-repositories, scan-build, ossf-scorecard]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3

      - name: decompress
        run: |
          for f in $(find . -type f -name '*.tar.gz'); do
            tar -xvf $f
          done

      - name: Calculate total bugs found
        id: summarize
        run: |
          bugs=$(find . -type f -name 'result.json' -type f -exec jq '.bugs | length' {} + | awk '{ sum += $1 } END { print sum }')
          complex_functions=$(find . -type f -name 'result.json' -type f -exec jq '.bugs[] | select( any(.; .type == "Cognitive complexity") ) | length' {} + | wc -l | awk '{ sum += $1 } END { print sum }')
          bugs=$(( bugs - complex_functions ))

          echo "### Total number of bugs found: ${bugs}" >> summary.md
          echo "### Total number of high cognitivite complexity functions found: ${complex_functions}" >> summary.md

          echo bugs=$bugs >> $GITHUB_OUTPUT
          echo complex_functions=$complex_functions >> $GITHUB_OUTPUT

          JSON="{\"bugs\": $bugs, "

          for f in $(find . -type f -name 'result.json'); do
            [[ $(jq '.bugs | length' $f) -eq 0 ]] && jq '.repo' $f | tr -d '"' >> clean-repos.txt
            jq '.types[] | "\(.type),\(.count)"' $f | tr -d '"' >> aggregate-bug-types.txt
            jq '.categories[] | "\(.category),\(.count)"' $f | tr -d '"' >> aggregate-bug-categories.txt
          done

          echo "" >> summary.md
          echo "***" >> summary.md
          echo "" >> summary.md

          cat aggregate-bug-categories.txt | awk -F',' '{ print $1 }' | sort -u > bug-categories.txt
          cat aggregate-bug-types.txt | awk -F',' '{ print $1 }' | sort -u > bug-types.txt

          echo "#### Bug categories" >> summary.md

          JSON+="\"categories\": ["
          while read -r line; do
            c=$(grep "$line" aggregate-bug-categories.txt | awk -F ',' '{ sum += $2 } END { print sum }')
            echo "##### $line: $c" >> summary.md
            JSON+="{\"category\": \"$line\", \"count\": $c, \"repos\": ["

            for r in $(grep -rl "$line" */result.json | xargs jq '.repo'); do
              JSON+="{\"repo\": $r},"
              echo $r | tr -d '"' >> summary.md
            done
            JSON="${JSON%?}" # Remove last ","
            JSON+="]},"

            echo "" >> summary.md
            echo "***" >> summary.md
            echo "" >> summary.md

          done < bug-categories.txt
          JSON="${JSON%?}" # Remove last ","
          JSON+="], "

          echo "#### Bug types" >> summary.md

          JSON+="\"types\": ["
          while read -r line; do
            c=$(grep "$line" aggregate-bug-types.txt | awk -F ',' '{ sum += $2 } END { print sum }')
            echo "##### $line: $c" >> summary.md
            JSON+="{\"type\": \"$line\", \"count\": $c, \"repo\": ["

            for r in $(grep -rl "$line" */result.json | xargs jq '.repo'); do
              JSON+="{\"repo\": $r},"
              echo $r | tr -d '"' >> summary.md
            done
            JSON="${JSON%?}" # Remove last ","
            JSON+="]},"

            echo "" >> summary.md
            echo "***" >> summary.md
            echo "" >> summary.md

          done < bug-types.txt
          JSON="${JSON%?}" # Remove last ","
          JSON+="]}"

          echo $JSON | jq '.' > aggregate-results.json

          echo "" >> summary.md
          echo "***" >> summary.md
          echo "" >> summary.md

          clean_repos=$(cat clean-repos.txt | wc -l)
          echo "### Repositories with no bugs: ${clean_repos}" >> summary.md
          cat clean-repos.txt >> summary.md

      - name: compare bugs vs score
        run: |
          touch score_vs_bugs.csv
          echo "### Breakdown" >> summary.md

          echo "| Repo        | OSSF score  | Bugs      | Cognitive complexity   |" >> summary.md
          echo "| ----------- | ----------- | --------- | ---------------------- |" >> summary.md

          for f in $(find . -type f -name 'result.json'); do
            repo=$(jq '.repo' $f | tr -d '"')
            srepo=$(echo $repo | tr '/' .)
            functions=$(jq '.functions' $f)

            echo "$repo $srepo $functions"

            complex_functions=$(jq '.bugs[] | select( any(.; .type == "Cognitive complexity") ) | length' $f | wc -l)
            bugs=$(jq '.bugs | length' $f)
            bugs=$(( bugs - complex_functions ))

            score=$(jq '.score' $srepo.ossf-scorecard/$srepo.ossf-scorecard.json)

            echo "| $repo | $score | $bugs | $complex_functions / $functions |" >> summary.md

            if [ $score -ge 0 ]; then
              echo "$repo,$score,$bugs,$functions,$complex_functions" >> score_vs_bugs.csv
            fi
          done

      - name: Github step summary
        run: cat summary.md >> $GITHUB_STEP_SUMMARY

      - name: Update comment
        uses: peter-evans/create-or-update-comment@v2
        with:
          token: ${{ secrets.GHPAT }}
          comment-id: ${{ needs.query-repositories.outputs.comment-id }}
          body-file: summary.md
          reactions: hooray

      - name: save results
        uses: actions/upload-artifact@v3
        with:
          retention-days: 90
          name: aggregate-results
          path: |
            aggregate-results.json
            score_vs_bugs.csv
            summary.md

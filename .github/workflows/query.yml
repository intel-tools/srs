name: Perform various scans on the results of the query
on:
  repository_dispatch:
    types: [srs-command]
  workflow_dispatch:
    inputs:
      search:
        description: 'The search terms to query'
        required: true
        type: string
      minstars:
        description: 'Minimum stars the repository should have to be included in query'
        required: false
        type: string
      maxstars:
        description: 'Maximum stars to break query up to'
        required: false
        type: string
      increment:
        description: 'Increment to break query up to in terms of stars'
        required: false
        type: string
      abovemax:
        description: 'Include repositories above the max number of stars in a single query'
        required: false
        type: string
jobs:
  query-repositories:
    runs-on: ubuntu-latest
    outputs:
      json: ${{ steps.json.outputs.json }}
      comment-id: ${{ steps.comment.outputs.comment-id }}
    env:
      GH_TOKEN: ${{ secrets.GHPAT }}
      DEFAULT: "archived:false language:c language:c++"
      MINSTARS: 1000 # below this will be skipped
      MAXSTARS: 4000 # stop when reached
      ABOVEMAX: 1 # include results above MAXSTARS in a single query, needs to be <=1000 results
      INCREMENT: 200 # size to group search loop into for range between MINSTARS..MAXSTARS-1
    steps:
      - name: install dependencies
        run: |
          type -p curl >/dev/null || sudo apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt-get update \
          && sudo apt-get install gh -y

      - name: set search terms from repo dispatch
        id: set
        run: |
          search="${{ github.event.client_payload.slash_command.args.named.search }}"
          [[ -z $search ]] && search="${{ inputs.search }}"
          [[ -z $search ]] && search="$DEFAULT"
          echo search="$search" >> $GITHUB_OUTPUT

          minstars=${{ github.event.client_payload.slash_command.args.named.minstars }}
          [[ -z $minstars ]] && minstars="${{ inputs.minstars }}"
          [[ -z $minstars ]] && minstars="$MINSTARS"
          echo minstars="$minstars" >> $GITHUB_OUTPUT

          maxstars=${{ github.event.client_payload.slash_command.args.named.maxstars }}
          [[ -z $maxstars ]] && maxstars="${{ inputs.maxstars }}"
          [[ -z $maxstars ]] && maxstars="$MAXSTARS"
          echo maxstars="$maxstars" >> $GITHUB_OUTPUT

          increment=${{ github.event.client_payload.slash_command.args.named.increment }}
          [[ -z $increment ]] && increment="${{ inputs.increment }}"
          [[ -z $increment ]] && increment="$INCREMENT"
          echo increment="$increment" >> $GITHUB_OUTPUT

          abovemax=${{ github.event.client_payload.slash_command.args.named.abovemax }}
          [[ -z $abovemax ]] && abovemax="${{ inputs.abovemax }}"
          [[ -z $abovemax ]] && abovemax="$ABOVEMAX"
          echo abovemax="$abovemax" >> $GITHUB_OUTPUT

      - name: checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GHPAT }}

      - name: execute search
        env:
          SEARCH: ${{ steps.set.outputs.search }}
          MINSTARS: ${{ steps.set.outputs.minstars }}
          MAXSTARS: ${{ steps.set.outputs.maxstars }}
          INCREMENT: ${{ steps.set.outputs.increment }}
          ABOVEMAX: ${{ steps.set.outputs.abovemax }}
        run: |
          ./query/query.sh "${SEARCH}" $MINSTARS $MAXSTARS $INCREMENT $ABOVEMAX

          count=$(jq '.repos | length' repos.json)

          echo "---" >> query-summary.md
          echo "## Repositories matching search query '${SEARCH} stars:>=$MINSTARS': $count" >> query-summary.md

      - name: filter by build system
        id: json
        run: |
          JSON=$(./query/filter.sh)
          echo "${JSON}" > filtered-repos.json
          COUNT=$(jq '. | length' filtered-repos.json)

          echo "## Repositories with supported build systems: $COUNT" >> query-summary.md
          echo json=$JSON >> $GITHUB_OUTPUT

      - name: record run id
        run: |
          echo "Github Actions Run ID: [${{ github.run_id }}](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)" >> query-summary.md
          echo "---" >> summary.md

      - name: Github step summary
        run: cat query-summary.md >> $GITHUB_STEP_SUMMARY

      - name: Create comment
        uses: peter-evans/create-or-update-comment@v2
        id: comment
        if: github.event.client_payload.github.payload.issue.number != ''
        with:
          token: ${{ secrets.GHPAT }}
          issue-number: ${{ github.event.client_payload.github.payload.issue.number }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body-file: query-summary.md

      - name: save results
        uses: actions/upload-artifact@v3
        with:
          retention-days: 90
          name: query-repositories
          path: |
            repos.json
            filtered-repos.json
            query-summary.md

  scan-build:
    needs: query-repositories
    uses: ./.github/workflows/scan-build.yml
    secrets: inherit
    with:
      input: ${{ needs.query-repositories.outputs.json }}

  ossf-scorecard:
    needs: query-repositories
    uses: ./.github/workflows/ossf-scorecard.yml
    secrets: inherit
    with:
      input: ${{ needs.query-repositories.outputs.json }}

  metadata:
    needs: query-repositories
    uses: ./.github/workflows/metadata.yml
    secrets: inherit
    with:
      input: ${{ needs.query-repositories.outputs.json }}

  aggregate-results:
    needs: [query-repositories, scan-build, ossf-scorecard, metadata]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GHPAT }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GHPAT }}

      - name: start summary workflow
        run: |
          comment=""
          commentid="${{ needs.query-repositories.outputs.comment-id }}"
          if [ $commentid != "" ]; then
            comment=" -f comment-id=$commentid"
          fi

          gh workflow run summary.yml -f run-id=${{ github.run_id }} $comment

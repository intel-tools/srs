name: Query GitHub for list of repositories and start SRS
on:
  workflow_dispatch:
    inputs:
      search:
        description: 'The search terms to query'
        required: true
        type: string
      minstars:
        description: 'Minimum stars the repository should have to be included in query'
        required: false
        type: string
      maxstars:
        description: 'Maximum stars to break query up to'
        required: false
        type: string
      increment:
        description: 'Increment to break query up to in terms of stars'
        required: false
        type: string
      abovemax:
        description: 'Include repositories above the max number of stars in a single query'
        required: false
        type: string
jobs:
  query-repositories:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GHPAT }}
      DEFAULT: "archived:false language:c language:c++"
      MINSTARS: 1000 # below this will be skipped
      MAXSTARS: 4000 # stop when reached
      ABOVEMAX: 1 # include results above MAXSTARS in a single query, needs to be <=1000 results
      INCREMENT: 200 # size to group search loop into for range between MINSTARS..MAXSTARS-1
    steps:
      - name: set search terms from repo dispatch
        id: set
        run: |
          search="${{ inputs.search }}"
          [[ -z $search ]] && search="$DEFAULT"
          echo search="$search" >> $GITHUB_OUTPUT

          minstars="${{ inputs.minstars }}"
          [[ -z $minstars ]] && minstars="$MINSTARS"
          echo minstars="$minstars" >> $GITHUB_OUTPUT

          maxstars="${{ inputs.maxstars }}"
          [[ -z $maxstars ]] && maxstars="$MAXSTARS"
          echo maxstars="$maxstars" >> $GITHUB_OUTPUT

          increment="${{ inputs.increment }}"
          [[ -z $increment ]] && increment="$INCREMENT"
          echo increment="$increment" >> $GITHUB_OUTPUT

          abovemax="${{ inputs.abovemax }}"
          [[ -z $abovemax ]] && abovemax="$ABOVEMAX"
          echo abovemax="$abovemax" >> $GITHUB_OUTPUT

      - name: checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GHPAT }}

      - name: execute search
        env:
          SEARCH: ${{ steps.set.outputs.search }}
          MINSTARS: ${{ steps.set.outputs.minstars }}
          MAXSTARS: ${{ steps.set.outputs.maxstars }}
          INCREMENT: ${{ steps.set.outputs.increment }}
          ABOVEMAX: ${{ steps.set.outputs.abovemax }}
        run: |
          ./query/query.sh "${SEARCH}" $MINSTARS $MAXSTARS $INCREMENT $ABOVEMAX

          count=$(jq '.repos | length' repos.json)

          echo "---" >> query-summary.md
          echo "## Repositories matching search query '${SEARCH} stars:>=$MINSTARS': $count" >> query-summary.md

      - name: filter by build system
        run: |
          JSON=$(./query/filter.sh)
          echo "${JSON}" > filtered-repos.json
          COUNT=$(jq '. | length' filtered-repos.json)

          echo "## Repositories with supported build systems: $COUNT" >> query-summary.md

      - name: record run id
        run: |
          echo "Github Actions Run ID: [${{ github.run_id }}](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)" >> query-summary.md
          echo "---" >> summary.md

      - name: Github step summary
        run: cat query-summary.md >> $GITHUB_STEP_SUMMARY

      - name: create matrix
        id: matrix
        run: |

         COUNT=1
         MATRIXID=1

         JSON="{ include :["

         for row in $(jq -rc '.[]' filtered-repos.json); do

              # Build matrices are limited to 256 items so we split the work
              if [ $(( $COUNT % 256 )) -eq 0 ]; then
                 # Remove last ","
                 JSON="${JSON%?}"
                 JSON+="]}"

                 echo "$MATRIXID: $JSON"
                 echo "$JSON" > matrix${MATRIXID}.json

                 JSON="{ include: ["
                 (( MATRIXID++ ))
              fi

              JSON+="$row,"

              (( COUNT++ ))

         done

         # Remove last ","
         JSON="${JSON%?}"
         JSON+="]}"

         echo "number-of-matrices=${MATRIXID}" >> $GITHUB_OUTPUT
         echo "$JSON" > matrix${MATRIXID}.json

         echo "$MATRIXID: $JSON"

      - name: Cache matrices
        uses: actions/cache@v3
        with:
          path: matrix*.json
          key: matrix-${{ github.run_id }}

      - name: save results
        uses: actions/upload-artifact@v3
        with:
          retention-days: 90
          name: query-repositories
          path: |
            repos.json
            filtered-repos.json
            query-summary.md

      - name: start scans
        run: gh workflow run srs.yml -f run-ids='${{ github.run_id }}' -f number-of-matrices=${{ steps.matrix.outputs.number-of-matrices }} -f matrix=1

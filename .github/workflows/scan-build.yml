name: Run clang scan-build and clang-tidy cognitive complexity analysis
on:
  workflow_dispatch:
    inputs:
      repo:
        description: 'repo'
        required: true
        default: ''
        type: string
      rate-limit:
        description: 'rate limit'
        required: false
        default: 150
        type: number
  workflow_call:
    inputs:
      repo:
        description: 'repo'
        required: true
        default: ''
        type: string
      rate-limit:
        description: 'rate limit'
        required: false
        default: 150
        type: number
    secrets:
      GHPAT:
        required: true

jobs:
  scan-build:
    runs-on: ubuntu-latest

    env:
      LLVM_VERSION: "15"
      TIMEOUT: "260m"

    defaults:
      run:
        shell: bash

    steps:
      - name: rate limit
        env:
          GHPAT: ${{ secrets.GHPAT }}
        run: |
          rl=$(curl -H "Authorization: token $GHPAT" -X GET https://api.github.com/rate_limit | jq '.rate.remaining')
          echo "Rate limit remaining: $rl"
          while [ $rl -lt ${{ inputs.rate-limit }} ]; do
            sleep 1h
            rl=$(curl -H "Authorization: token $GHPAT" -X GET https://api.github.com/rate_limit | jq '.rate.remaining')
            echo "Rate limit remaining: $rl"
          done

      - name: generate save directory name
        id: vars
        run: |
          srepo=$(echo ${{ inputs.repo }} | tr '/' .)

          echo "SREPO set to ${SREPO}"
          echo "SREPO=$srepo" >> $GITHUB_OUTPUT

      - name: checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GHPAT }}

      - name: checkout target repo
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repo }}
          token: ${{ secrets.GHPAT }}
          path: repo

      - name: Cache docker
        id: cache
        uses: actions/cache@v3
        with:
          path: scan-build.tar
          key: scan-build

      - name: Set up Docker Buildx
        if: steps.cache.outputs.cache-hit != 'true'
        uses: docker/setup-buildx-action@v2

      - name: Build production image
        if: steps.cache.outputs.cache-hit != 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./scan-build
          file: ./scan-build/Dockerfile
          tags: scan-build:latest
          outputs: type=docker,dest=scan-build.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Load image
        run: docker load -i scan-build.tar

      - name: scan-build
        timeout-minutes: 300
        run: docker run -v "$GITHUB_WORKSPACE":/work scan-build -r "${{ inputs.repo }}" -l "$LLVM_VERSION" -t "$TIMEOUT"

      - name: fix permissions
        if: ${{ always() }}
        run: |
          USER=$(whoami)
          sudo chown -R $USER.$USER ${{ steps.vars.outputs.SREPO }}

      - name: post summary
        run: cat ${{ steps.vars.outputs.SREPO }}/summary.md >> $GITHUB_STEP_SUMMARY

      - name: compress result
        if: ${{ always() }}
        run: tar -czvf ${{ steps.vars.outputs.SREPO }}.${{ github.job }}.tar.gz ${{ steps.vars.outputs.SREPO }}

      - name: save results
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.vars.outputs.SREPO }}.${{ github.job }}
          path: ${{ steps.vars.outputs.SREPO }}.${{ github.job }}.tar.gz
